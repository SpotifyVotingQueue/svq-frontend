/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GrantedAuthority } from './GrantedAuthority';
import {
    GrantedAuthorityFromJSON,
    GrantedAuthorityFromJSONTyped,
    GrantedAuthorityToJSON,
} from './GrantedAuthority';

/**
 * 
 * @export
 * @interface OAuth2User
 */
export interface OAuth2User {
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof OAuth2User
     */
    attributes?: { [key: string]: object; };
    /**
     * 
     * @type {Array<GrantedAuthority>}
     * @memberof OAuth2User
     */
    authorities?: Array<GrantedAuthority>;
    /**
     * 
     * @type {string}
     * @memberof OAuth2User
     */
    name?: string;
}

/**
 * Check if a given object implements the OAuth2User interface.
 */
export function instanceOfOAuth2User(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OAuth2UserFromJSON(json: any): OAuth2User {
    return OAuth2UserFromJSONTyped(json, false);
}

export function OAuth2UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuth2User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'authorities': !exists(json, 'authorities') ? undefined : ((json['authorities'] as Array<any>).map(GrantedAuthorityFromJSON)),
        'name': !exists(json, 'name') ? undefined : json['name'],
    };
}

export function OAuth2UserToJSON(value?: OAuth2User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attributes': value.attributes,
        'authorities': value.authorities === undefined ? undefined : ((value.authorities as Array<any>).map(GrantedAuthorityToJSON)),
        'name': value.name,
    };
}

