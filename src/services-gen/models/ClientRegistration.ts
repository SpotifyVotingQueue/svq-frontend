/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthorizationGrantType } from './AuthorizationGrantType';
import {
    AuthorizationGrantTypeFromJSON,
    AuthorizationGrantTypeFromJSONTyped,
    AuthorizationGrantTypeToJSON,
} from './AuthorizationGrantType';
import type { ClientAuthenticationMethod } from './ClientAuthenticationMethod';
import {
    ClientAuthenticationMethodFromJSON,
    ClientAuthenticationMethodFromJSONTyped,
    ClientAuthenticationMethodToJSON,
} from './ClientAuthenticationMethod';
import type { ProviderDetails } from './ProviderDetails';
import {
    ProviderDetailsFromJSON,
    ProviderDetailsFromJSONTyped,
    ProviderDetailsToJSON,
} from './ProviderDetails';

/**
 * 
 * @export
 * @interface ClientRegistration
 */
export interface ClientRegistration {
    /**
     * 
     * @type {string}
     * @memberof ClientRegistration
     */
    registrationId?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRegistration
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRegistration
     */
    clientSecret?: string;
    /**
     * 
     * @type {ClientAuthenticationMethod}
     * @memberof ClientRegistration
     */
    clientAuthenticationMethod?: ClientAuthenticationMethod;
    /**
     * 
     * @type {AuthorizationGrantType}
     * @memberof ClientRegistration
     */
    authorizationGrantType?: AuthorizationGrantType;
    /**
     * 
     * @type {string}
     * @memberof ClientRegistration
     */
    redirectUri?: string;
    /**
     * 
     * @type {Set<string>}
     * @memberof ClientRegistration
     */
    scopes?: Set<string>;
    /**
     * 
     * @type {ProviderDetails}
     * @memberof ClientRegistration
     */
    providerDetails?: ProviderDetails;
    /**
     * 
     * @type {string}
     * @memberof ClientRegistration
     */
    clientName?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientRegistration
     * @deprecated
     */
    redirectUriTemplate?: string;
}

/**
 * Check if a given object implements the ClientRegistration interface.
 */
export function instanceOfClientRegistration(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ClientRegistrationFromJSON(json: any): ClientRegistration {
    return ClientRegistrationFromJSONTyped(json, false);
}

export function ClientRegistrationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClientRegistration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'registrationId': !exists(json, 'registrationId') ? undefined : json['registrationId'],
        'clientId': !exists(json, 'clientId') ? undefined : json['clientId'],
        'clientSecret': !exists(json, 'clientSecret') ? undefined : json['clientSecret'],
        'clientAuthenticationMethod': !exists(json, 'clientAuthenticationMethod') ? undefined : ClientAuthenticationMethodFromJSON(json['clientAuthenticationMethod']),
        'authorizationGrantType': !exists(json, 'authorizationGrantType') ? undefined : AuthorizationGrantTypeFromJSON(json['authorizationGrantType']),
        'redirectUri': !exists(json, 'redirectUri') ? undefined : json['redirectUri'],
        'scopes': !exists(json, 'scopes') ? undefined : json['scopes'],
        'providerDetails': !exists(json, 'providerDetails') ? undefined : ProviderDetailsFromJSON(json['providerDetails']),
        'clientName': !exists(json, 'clientName') ? undefined : json['clientName'],
        'redirectUriTemplate': !exists(json, 'redirectUriTemplate') ? undefined : json['redirectUriTemplate'],
    };
}

export function ClientRegistrationToJSON(value?: ClientRegistration | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'registrationId': value.registrationId,
        'clientId': value.clientId,
        'clientSecret': value.clientSecret,
        'clientAuthenticationMethod': ClientAuthenticationMethodToJSON(value.clientAuthenticationMethod),
        'authorizationGrantType': AuthorizationGrantTypeToJSON(value.authorizationGrantType),
        'redirectUri': value.redirectUri,
        'scopes': value.scopes === undefined ? undefined : Array.from(value.scopes as Set<any>),
        'providerDetails': ProviderDetailsToJSON(value.providerDetails),
        'clientName': value.clientName,
        'redirectUriTemplate': value.redirectUriTemplate,
    };
}

