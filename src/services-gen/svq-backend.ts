/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/party": {
    post: operations["create"];
  };
  "/api/v1/user/secrets": {
    get: operations["secrets"];
  };
  "/api/v1/user/me": {
    get: operations["me"];
  };
  "/api/v1/track/{id}": {
    get: operations["getTrack"];
  };
  "/api/v1/track/{id}/cover": {
    get: operations["getTrackCover"];
  };
  "/api/v1/search/{query}": {
    get: operations["searchTracks"];
  };
  "/api/v1/ping": {
    get: operations["ping"];
  };
  "/api/v1/login": {
    get: operations["login"];
  };
}

export interface components {
  schemas: {
    AuthenticationMethod: {
      value?: string;
    };
    AuthorizationGrantType: {
      value?: string;
    };
    ClientAuthenticationMethod: {
      value?: string;
    };
    ClientRegistration: {
      registrationId?: string;
      clientId?: string;
      clientSecret?: string;
      clientAuthenticationMethod?: components["schemas"]["ClientAuthenticationMethod"];
      authorizationGrantType?: components["schemas"]["AuthorizationGrantType"];
      redirectUri?: string;
      scopes?: string[];
      providerDetails?: components["schemas"]["ProviderDetails"];
      clientName?: string;
      /** @deprecated */
      redirectUriTemplate?: string;
    };
    OAuth2AccessToken: {
      tokenValue?: string;
      /** Format: date-time */
      issuedAt?: string;
      /** Format: date-time */
      expiresAt?: string;
      tokenType?: components["schemas"]["TokenType"];
      scopes?: string[];
    };
    OAuth2AuthorizedClient: {
      clientRegistration?: components["schemas"]["ClientRegistration"];
      principalName?: string;
      accessToken?: components["schemas"]["OAuth2AccessToken"];
      refreshToken?: components["schemas"]["OAuth2RefreshToken"];
    };
    OAuth2RefreshToken: {
      tokenValue?: string;
      /** Format: date-time */
      issuedAt?: string;
      /** Format: date-time */
      expiresAt?: string;
    };
    ProviderDetails: {
      authorizationUri?: string;
      tokenUri?: string;
      userInfoEndpoint?: components["schemas"]["UserInfoEndpoint"];
      jwkSetUri?: string;
      issuerUri?: string;
      configurationMetadata?: { [key: string]: { [key: string]: unknown } };
    };
    TokenType: {
      value?: string;
    };
    UserInfoEndpoint: {
      uri?: string;
      authenticationMethod?: components["schemas"]["AuthenticationMethod"];
      userNameAttributeName?: string;
    };
    PartyCreatedDto: {
      joinCode?: string;
    };
    Href: {
      href?: string;
    };
    UserDto: {
      name?: string;
      picture?: components["schemas"]["Href"];
    };
    TrackDto: {
      id?: string;
      name?: string;
      artists?: string[];
    };
    TextDto: {
      response?: string;
    };
  };
}

export interface operations {
  create: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PartyCreatedDto"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OAuth2AuthorizedClient"];
      };
    };
  };
  secrets: {
    parameters: {
      query: {
        authorizedClient: components["schemas"]["OAuth2AuthorizedClient"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  me: {
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["UserDto"];
        };
      };
    };
  };
  getTrack: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TrackDto"];
        };
      };
    };
  };
  getTrackCover: {
    parameters: {
      path: {
        id: string;
      };
      query: {
        maxHeight: number;
        minHeight: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": string;
        };
      };
    };
  };
  searchTracks: {
    parameters: {
      path: {
        query: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TrackDto"][];
        };
      };
    };
  };
  ping: {
    responses: {
      /** Server is available - the server responds with "pong". */
      200: {
        content: {
          "*/*": components["schemas"]["TextDto"];
        };
      };
    };
  };
  login: {
    parameters: {
      query: {
        redirect: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": { [key: string]: unknown };
        };
      };
    };
  };
}

export interface external {}
